<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Quiet~仙哥的博客</title>
    <link>https://blog.ilifeapp.com/post/</link>
    <description>Recent content in Posts on Quiet~仙哥的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 17 Aug 2020 21:27:10 +0800</lastBuildDate>
    
	<atom:link href="https://blog.ilifeapp.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift语言重点记录</title>
      <link>https://blog.ilifeapp.com/post/swift%E8%AF%AD%E8%A8%80%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 17 Aug 2020 21:27:10 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/swift%E8%AF%AD%E8%A8%80%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</guid>
      <description>Classes Structures vs. classes Structures Useful for representing values. Implicit copying of values. Becomes completely immutable when declared with let. Fast memory allocation(stack). Classes Useful for representing objects with an identity. Implicity sharing of objects. Internals can remain mutable even when declared with let. Slower memory allocation(heap). A general understanding of stack and heap Stack The System uses the stack to store anything on the immediate thread of execution; it&amp;rsquo;s tightly managed and optimized by the CPU. When a function creates a variable, the stack stores that variable and then destroys it when the function exits. Since the stack is so strictly organized, it&amp;rsquo;s very efficient, and thus quite fast. Heap The system uses the heap to store instances of reference types. The heap is generally a large pool of memory from which the system can request and dynamically allocate</description>
    </item>
    
    <item>
      <title>Swift捕获列表浅析</title>
      <link>https://blog.ilifeapp.com/post/swift%E6%8D%95%E8%8E%B7%E5%88%97%E8%A1%A8%E6%B5%85%E6%9E%90/</link>
      <pubDate>Wed, 17 Jun 2020 14:55:33 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/swift%E6%8D%95%E8%8E%B7%E5%88%97%E8%A1%A8%E6%B5%85%E6%9E%90/</guid>
      <description>Closures（闭包） 捕获列表（capture list）和闭包密不可分。 Closures capture values from the enclosing scope. 因为swift是一门安全的语言，闭包延长了它所使用的任何对象的生命周期，以此来保证这些对象是可用的和合法的。这个自动的安全性很好，但它也容易带来一些副作用，比如容易导致引用循环。最常见的场景就</description>
    </item>
    
    <item>
      <title>扔鸡蛋问题 动态规划</title>
      <link>https://blog.ilifeapp.com/post/%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sun, 14 Jun 2020 17:44:07 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>问题：一名科学家正在一栋大楼进行一个实验：某种材料的防护性能。他在大楼底部铺下一层这个防护材料，想拿鸡蛋做实验，将鸡蛋从楼层掉下，看看鸡蛋从哪一层掉下去会摔碎，以此测试材料的防护性能。这就是著名的鸡蛋掉落问题（egg dropping problem），即给定N个鸡蛋和M层楼，试问至少需要几次才能</description>
    </item>
    
    <item>
      <title>设计模式简介</title>
      <link>https://blog.ilifeapp.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 23 May 2020 15:36:43 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</guid>
      <description>Design patterns are reusable, template solutions to common development problems. 掌握设计模式的好处 可以让你成为一个更好的开发者。 你可以用更少的开发时间，更少的开发工作量，来最终开发出更好的软件。 创造了一个开发者之间交流的通用语言。 使用良好设计模式的项目可以让新来的开发者快速上手。 可以让你在不同的代码中找到相似之处。 所有开发者都应该了解设计</description>
    </item>
    
    <item>
      <title>PushNotifications简介</title>
      <link>https://blog.ilifeapp.com/post/PushNotifications%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 23 May 2020 10:32:52 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/PushNotifications%E7%AE%80%E4%BB%8B/</guid>
      <description>通知处理流程 无论你是使用本地通知，还是使用远程通知，通过的处理流程一般都如下所示： Ask your user for permission to receive notifications. Optionally make changes to the message before display. Optionally add custom buttons for the user to interact with. Optionally configure a custom user interface to display the notification. Optionally take action based on what the user did with the notification. 通知可以可以做的事情 Displaying a message. Playing a sound. Updating the badge icon on your app. Showing an image or playing a movie. Giving the user a way to pick form a few options. Anything that a UIViewController can implement. Note: 在设计</description>
    </item>
    
    <item>
      <title>SpriteKit学习笔记</title>
      <link>https://blog.ilifeapp.com/post/SpriteKit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 22 Feb 2020 11:14:18 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/SpriteKit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>1、Sprites scene scene一般代表一个游戏界面。SpriteKit中所有展示在屏幕上的元素都是继承自SKNode import SpriteKit class GameScene: SKScene { // SpriteKit calls before it presents this scene in a view override func didMove(to view: SKView) { backgroundColor = SKColor.black let background = SKSpriteNode(imageNamed: &amp;quot;background&amp;quot;) background.position = CGPoint(x: size.width / 2, y: size.height / 2) background.anchorPoint = CGPoint.zero // Sprites are rotated about their anchor points. background.zRotation = CGFloat.pi / 8 addChild(background) } } 在游戏中依然使用UIViewControll</description>
    </item>
    
    <item>
      <title>Mac上hugo二进制安装</title>
      <link>https://blog.ilifeapp.com/post/Mac%E4%B8%8Ahugo%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 12 Jan 2020 10:53:14 +0800</pubDate>
      
      <guid>https://blog.ilifeapp.com/post/Mac%E4%B8%8Ahugo%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</guid>
      <description>写在前面的话 最近一时兴起，想着搭建一个个人博客，搜索了一些资料后，发现目前github上hugo的stars最高，hugo又是用go语言编写的，就选择了使用hugo来搭建静态博客，在安装hugo的过程中，遇到了一些坑，在此记录一下，如果能帮到同样安装hugo的人，那就最好不过啦。</description>
    </item>
    
  </channel>
</rss>